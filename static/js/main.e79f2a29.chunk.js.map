{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","list","current","handleEnter","event","console","log","key","submit","handleInput","e","setState","target","value","storedNums","alert","push","remove","index","splice","className","type","onKeyPress","this","onChange","placeholder","onClick","map","number","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2OA4DeA,G,iNAxDbC,MAAQ,CACNC,KAAM,GACNC,QAAS,I,EAGXC,YAAc,SAAAC,GACZC,QAAQC,IAAIF,GACM,UAAdA,EAAMG,KACR,EAAKC,U,EAITC,YAAc,SAAAC,GACZ,EAAKC,SAAS,CAAET,QAASQ,EAAEE,OAAOC,S,EAGpCL,OAAS,SAACE,GACRL,QAAQC,IAAI,MACZ,IAAIQ,EAAa,EAAKd,MAAMC,KAC5B,GAA0B,KAAvB,EAAKD,MAAME,QACZ,OAAOa,MAAM,iBAEfD,EAAWE,KAAK,EAAKhB,MAAME,SAC3B,EAAKS,SAAS,CAAEV,KAAMa,EAAYZ,QAAS,M,EAG7Ce,OAAS,SAACC,GACR,IAAIJ,EAAa,EAAKd,MAAMC,KAC5Ba,EAAWK,OAAOD,EAAO,GACzB,EAAKP,SAAS,CAACV,KAAMa,K,wEAGb,IAAD,OACP,OACE,yBAAKM,UAAU,WACb,wCACA,yBAAKA,UAAU,QACb,2BACEC,KAAK,OACLC,WAAYC,KAAKpB,YACjBqB,SAAUD,KAAKd,YACfI,MAAOU,KAAKvB,MAAME,QAClBuB,YAAY,uBAEd,4BAAQC,QAASH,KAAKf,QAAtB,QAEF,yBAAKY,UAAU,YACZG,KAAKvB,MAAMC,KAAK0B,KAAI,SAACC,EAAQV,GAC5B,OAAO,uBAAGX,IAAKW,EAAOQ,QAAS,kBAAM,EAAKT,OAAOC,KAASU,Y,GAjDpDC,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,a","file":"static/js/main.e79f2a29.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    list: [],\n    current: \"\"\n  };\n\n  handleEnter = event => {\n    console.log(event);\n    if (event.key === \"Enter\") {\n      this.submit();\n    }\n  };\n\n  handleInput = e => {\n    this.setState({ current: e.target.value });\n  };\n\n  submit = (e) => {\n    console.log(\"hi\");\n    let storedNums = this.state.list;\n    if(this.state.current === \"\"){\n      return alert(`enter a value`)\n    }\n    storedNums.push(this.state.current);\n    this.setState({ list: storedNums, current: \"\" });\n  };\n\n  remove = (index) => {\n    let storedNums = this.state.list;\n    storedNums.splice(index, 1)\n    this.setState({list: storedNums})\n  }\n\n  render() {\n    return (\n      <div className=\"address\">\n        <h1>Contacts</h1>\n        <div className=\"form\">\n          <input\n            type=\"text\"\n            onKeyPress={this.handleEnter}\n            onChange={this.handleInput}\n            value={this.state.current}\n            placeholder=\"e.g. 123-4567-8901\"\n          ></input>\n          <button onClick={this.submit}>ADD</button>\n        </div>\n        <div className=\"contacts\">\n          {this.state.list.map((number, index) => {\n            return <p key={index} onClick={() => this.remove(index)}>{number}</p>;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}